import streamlit as st
from stmol import showmol
import py3Dmol
import requests
import biotite.structure.io as bsio
import re

# Set page configuration
st.set_page_config(layout='wide')

# Sidebar
st.sidebar.title('ESMFold - Protein Design')
st.sidebar.write('[*ESMFold*](https://esmatlas.com/about) is an end-to-end single sequence protein structure predictor based on the ESM-2 language model. For more information, read the [research article](https://www.biorxiv.org/content/10.1101/2022.07.20.500902v2) and the [news article](https://www.nature.com/articles/d41586-022-03539-1) published in *Nature*.')

# Default protein sequence
DEFAULT_SEQ = "MGSSHHHHHHSSGLVPRGSHMRGPNPTAASLEASAGPFTVRSFTVSRPSGYGAGTVYYPTNAGGTVGAIAIVPGYTARQSSIKWWGPRLASHGFVVITIDTNSTLDQPSSRSSQQMAALRQVASLNGTSSSPIYGKVDTARMGVMGWSMGGGGSLISAANNPSLKAAAPQAPWDSSTNFSSVTVPTLIFACENDSIAPVNSSALPIYDSMSRNAKQFLEINGGSHSCANSGNSNQALIGKKGVAWMKRFMDNDTRYSTFACENPNSTRVSDFRTANCSLEDPAANKARKEAELAAATAEQ"

# Function to render molecule
def render_mol(pdb):
    pdbview = py3Dmol.view()
    pdbview.addModel(pdb, 'pdb')
    pdbview.setStyle({'cartoon': {'color': 'spectrum'}})
    pdbview.setBackgroundColor('white')
    pdbview.zoomTo()
    pdbview.zoom(2, 800)
    pdbview.spin(True)
    showmol(pdbview, height=500, width=800)

# Function to validate protein sequence
def validate_sequence(sequence):
    if not sequence:
        return False, "Sequence is empty."
    if not re.match("^[ACDEFGHIKLMNPQRSTVWY]*$", sequence):
        return False, "Sequence contains invalid characters."
    return True, ""

# Function to fetch PDB structure from ESMFold API
@st.cache_data
def fetch_pdb(sequence):
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    response = requests.post('https://api.esmatlas.com/foldSequence/v1/pdb/', headers=headers, data=sequence)
    if response.status_code == 200:
        return response.content.decode('utf-8')
    else:
        st.error(f"Failed to fetch PDB structure. Status code: {response.status_code}")
        return None

# Function to update and display the protein structure
def update(sequence, ph, temperature, solvent_accessibility):
    with st.spinner('Predicting protein structure...'):
        pdb_string = fetch_pdb(sequence)
        if pdb_string:
            name = sequence[:3] + sequence[-3:]
            with open('predicted.pdb', 'w') as f:
                f.write(pdb_string)

            struct = bsio.load_structure('predicted.pdb', extra_fields=["b_factor"])
            b_value = round(struct.b_factor.mean(), 4)

            # Display protein structure
            st.subheader('Visualization of predicted protein structure')
            render_mol(pdb_string)

            # Display plDDT value
            st.subheader('plDDT')
            st.write('plDDT is a per-residue estimate of the confidence in prediction on a scale from 0-100.')
            st.info(f'plDDT: {b_value}')

            # Display environmental factors
            st.subheader('Environmental Factors')
            st.write(f"**pH:** {ph}")
            st.write(f"**Temperature:** {temperature} Â°C")
            st.write(f"**Solvent Accessibility:** {solvent_accessibility}")

            # Download button for PDB file
            st.download_button(
                label="Download PDB",
                data=pdb_string,
                file_name='predicted.pdb',
                mime='text/plain',
                key="download_button"
            )

            # Rosetta Integration
            st.subheader('Rosetta Integration')
            st.write("To optimize the protein structure using Rosetta, download the PDB file and use it as input for Rosetta.")
            st.write("Learn more about Rosetta: [Rosetta Commons](https://www.rosettacommons.org/)")

            # NetSurfP Integration
            st.subheader('Solvent Accessibility Prediction (NetSurfP)')
            st.write("To predict solvent accessibility, upload your sequence to NetSurfP:")
            st.markdown("[NetSurfP Web Server](https://services.healthtech.dtu.dk/service.php?NetSurfP-2.0)")

# Protein sequence input
txt = st.sidebar.text_area('Input sequence', DEFAULT_SEQ, height=275)

# Environmental factors input
st.sidebar.subheader('Environmental Factors')
ph = st.sidebar.slider('pH', min_value=0.0, max_value=14.0, value=7.0, step=0.1)
temperature = st.sidebar.slider('Temperature (Â°C)', min_value=0.0, max_value=100.0, value=25.0, step=0.1)
solvent_accessibility = st.sidebar.selectbox('Solvent Accessibility', ['High', 'Medium', 'Low'])

# Predict button
if st.sidebar.button('Predict', key="predict_button"):
    is_valid, message = validate_sequence(txt)
    if is_valid:
        update(txt, ph, temperature, solvent_accessibility)
    else:
        st.error(message)
else:
    st.warning('ðŸ‘ˆ Enter protein sequence data and adjust environmental factors!')
